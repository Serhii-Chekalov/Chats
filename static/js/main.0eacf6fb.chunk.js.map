{"version":3,"sources":["components/SidebarView/SidebarView.styled.js","components/SidebarView/SidebarView.js","components/ChatView/ChatView.js","components/RootView/RootView.styled.js","components/RootView/RootView.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["Head","styled","strong","SidebarView","chats","onChatChange","map","id","user","creator","onClick","ChatView","active","messages","onMessageCreate","useState","message","setMessage","currectMessages","useMemo","handleKeyDown","event","key","style","padding","index","textAlign","type","value","onChange","e","target","onKeyDown","RootWrap","div","SidebarWrap","ChatWrap","main","RootView","activeChat","setActiveChat","chatsData","messagesData","setMessages","setFakeData","fetch","then","res","json","result","error","alert","setTimeout","Math","floor","random","modifyMessages","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2uBAEaA,EAAOC,IAAOC,OAAV,+C,OCKJC,EAAc,WAAwC,IAAD,yDAAP,GAAO,IAApCC,aAAoC,MAA5B,GAA4B,EAAxBC,EAAwB,EAAxBA,aACxC,OACE,gCACE,4CACA,cAACL,EAAD,oBACA,6BACGI,EAAME,KAAI,YAA4B,IAAzBC,EAAwB,EAAxBA,GAAaC,GAAW,EAApBC,QAAoB,EAAXD,MACzB,OACE,6BACE,wBAAQE,QAAS,kBAAML,EAAaE,IAApC,SAA0CC,KADnCD,YCbRI,EAAW,WAAsD,IAAD,yDAAP,GAA3CC,EAAkD,EAAlDA,OAAkD,IAA1CC,gBAA0C,MAA/B,GAA+B,EAA3BC,EAA2B,EAA3BA,gBAChD,EAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAEMC,EAAkBC,mBACtB,kCAAMN,EAASD,UAAf,QAA0B,KAC1B,CAACA,EAAQC,IAGLO,EAAgB,SAACC,GAChBL,GAEa,UAAdK,EAAMC,MACRR,EAAgBE,GAChBC,EAAW,MAIf,OACE,qCACE,oBAAIM,MAAO,CAAEC,QAAS,YAAtB,SACGN,EAAgBZ,KAAI,WAAoBmB,GAAW,IAA5BhB,EAA2B,EAA3BA,QAASD,EAAkB,EAAlBA,KAC/B,OACE,oBAAgBe,MAAO,CAAEG,UAAS,OAAEjB,QAAF,IAAEA,IAAW,SAA/C,SACE,4BAAIA,GAAWD,KADRiB,QAMf,8BACE,uBACEE,KAAK,OACLC,MAAOZ,EACPa,SAAU,SAACC,GAAD,OAAOb,EAAWa,EAAEC,OAAOH,QACrCI,UAAWZ,U,gBCjCRa,EAAWhC,IAAOiC,IAAV,gFAMRC,EAAclC,IAAOiC,IAAV,+DAKXE,EAAWnC,IAAOoC,KAAV,+DCFRC,EAAW,WACtB,MAAoCvB,mBAAS,GAA7C,mBAAOwB,EAAP,KAAmBC,EAAnB,KACA,EAA0BzB,mBAAS0B,GAAnC,mBAAOrC,EAAP,KACA,GADA,KACgCW,mBAAS2B,IAAzC,mBAAO7B,EAAP,KAAiB8B,EAAjB,KAEMC,EAAc,WAClBC,MAAM,2CACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MACC,SAACG,GACCN,GAAY,SAAC9B,GAAD,mBAAC,eACRA,GADO,kBAET0B,EAFS,sBAGL1B,EAAS0B,IAHJ,CAIR,CACE/B,KAAMyC,EAAOrB,iBAKrB,SAACsB,GACCC,MAAMD,EAAMlC,aAsBpB,OACE,eAACiB,EAAD,WACE,cAACE,EAAD,UACE,cAAC,EAAD,CAAa/B,MAAOA,EAAOC,aAAc,SAACE,GAAD,OAAQiC,EAAcjC,QAEjE,cAAC6B,EAAD,UACE,cAAC,EAAD,CACExB,OAAQ2B,EACR1B,SAAUA,EACVC,gBAAiB,SAACE,GAAD,OA1BF,SAACA,GACtB2B,GAAY,SAAC9B,GAAD,mBAAC,eACRA,GADO,kBAET0B,EAFS,sBAGL1B,EAAS0B,IAHJ,CAIR,CACE9B,QAASO,UAIfoC,WACER,EAEsC,KAArCS,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,IAaCC,CAAexC,YCxDxCyC,MAJf,WACE,OAAO,cAAC,EAAD,KCQMC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0eacf6fb.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\r\n\r\nexport const Head = styled.strong`\r\n  display: block;\r\n`;\r\n","import { useState, useEffect } from \"react\";\n\nimport { Head } from \"./SidebarView.styled\";\n\n// chat -> ID, creator, user\n// messages -> ID []<messages>\n\nexport const SidebarView = ({ chats = [], onChatChange } = {}) => {\n  return (\n    <div>\n      <header>Header</header>\n      <Head>Chats</Head>\n      <ul>\n        {chats.map(({ id, creator, user }) => {\n          return (\n            <li key={id}>\n              <button onClick={() => onChatChange(id)}>{user}</button>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n","import { useState, useEffect, useMemo } from \"react\";\n\nexport const ChatView = ({ active, messages = [], onMessageCreate } = {}) => {\n  const [message, setMessage] = useState(\"\");\n\n  const currectMessages = useMemo(\n    () => messages[active] ?? [],\n    [active, messages]\n  );\n\n  const handleKeyDown = (event) => {\n    if (!message) return;\n\n    if (event.key === \"Enter\") {\n      onMessageCreate(message);\n      setMessage(\"\");\n    }\n  };\n\n  return (\n    <>\n      <ul style={{ padding: \"0px 40px\" }}>\n        {currectMessages.map(({ creator, user }, index) => {\n          return (\n            <li key={index} style={{ textAlign: creator ?? \"right\" }}>\n              <p>{creator || user}</p>\n            </li>\n          );\n        })}\n      </ul>\n      <div>\n        <input\n          type=\"text\"\n          value={message}\n          onChange={(e) => setMessage(e.target.value)}\n          onKeyDown={handleKeyDown}\n        />\n      </div>\n    </>\n  );\n};\n","import styled from \"@emotion/styled\";\n\nexport const RootWrap = styled.div`\n  width: 100%;\n  height: 100vh;\n  display: flex;\n`;\n\nexport const SidebarWrap = styled.div`\n  height: inherit;\n  width: 30%;\n`;\n\nexport const ChatWrap = styled.main`\n  height: inherit;\n  width: 70%;\n`;\n","import { useState, useEffect } from \"react\";\nimport { SidebarView } from \"../SidebarView/SidebarView\";\nimport { ChatView } from \"../ChatView/ChatView\";\n\n// default data\nimport chatsData from \"./default-chats.json\";\nimport messagesData from \"./default-messages.json\";\n\n// styles\nimport { ChatWrap, RootWrap, SidebarWrap } from \"./RootView.styled\";\n\nexport const RootView = () => {\n  const [activeChat, setActiveChat] = useState(1);\n  const [chats, setChats] = useState(chatsData);\n  const [messages, setMessages] = useState(messagesData);\n\n  const setFakeData = () => {\n    fetch(\"https://api.chucknorris.io/jokes/random\")\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          setMessages((messages) => ({\n            ...messages,\n            [activeChat]: [\n              ...messages[activeChat],\n              {\n                user: result.value,\n              },\n            ],\n          }));\n        },\n        (error) => {\n          alert(error.message);\n        }\n      );\n  };\n\n  const modifyMessages = (message) => {\n    setMessages((messages) => ({\n      ...messages,\n      [activeChat]: [\n        ...messages[activeChat],\n        {\n          creator: message,\n        },\n      ],\n    }));\n    setTimeout(\n      setFakeData,\n      // set any renage, that u want 10 -> 15\n      (Math.floor(Math.random() * 3) + 1) * 1000\n    );\n  };\n\n  return (\n    <RootWrap>\n      <SidebarWrap>\n        <SidebarView chats={chats} onChatChange={(id) => setActiveChat(id)} />\n      </SidebarWrap>\n      <ChatWrap>\n        <ChatView\n          active={activeChat}\n          messages={messages}\n          onMessageCreate={(message) => modifyMessages(message)}\n        />\n      </ChatWrap>\n    </RootWrap>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport { RootView } from \"../RootView/RootView\";\n\nfunction App() {\n  return <RootView />;\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}